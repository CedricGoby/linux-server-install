#------------------------------------------
# Fonctions
#------------------------------------------

#-----------------------------------------------------------------------
# Execution de commande
#-----------------------------------------------------------------------
# Lance une commande et vérifie son execution. La commande stockée est lancée en utilisant eval.
# Si la commande renvoit une erreur on peut choisir de continuer ou de sortir du programme.
# $1 --> commande, $2 --> texte
f_cmd(){
printf "\n%s\n" "$2 Veuillez patienter."

eval "$1"

if [[ "$?" != 0 ]]; then
	printf "%s\n%s\n" "$2 [ ERREUR ] - Consultez les logs" "Souhaitez-vous continuer ? [O/n] "
	read choice
	case $choice in
	  [yYoO]*) printf "%s\n" "Reprise du programme...";;
	  [nN]*) printf "%s\n" "Fin du programme !"
	         exit 0;;
	  *) printf "%s\n" "Erreur de saisie. Fin du programme !"
	     exit 1;;
	esac
else
    printf "%s\n" "$(date) $2 [ OK ]" | tee -a "$_file_logs"
fi
}

#-----------------------------------------------------------------------
# Vérification du statut d'un paquet
#-----------------------------------------------------------------------
# $1 --> Nom du paquet
# 0 - paquet installé
# 1 - paquet non installé, disponible dans les dépôts
# 2 - paquet non installé, non disponible dans les dépôts
f_check_for_package() {
	if dpkg-query -Wf'${db:Status-abbrev}' "$1" 2>/dev/null | grep -q '^i'; then
		return 0
	else
		if apt-cache show "$1" 1>/dev/null 2>&1 ; then		
		  return 1
		else
		  return 2
		fi
	fi
}

#-----------------------------------------------------------------------
# Installation d'un paquet via les dépôts
#-----------------------------------------------------------------------
f_install_package() {
# Test de la présence du paquet
printf "\n%s\n" "Vérification de la présence de "$1"..."
if f_check_for_package "$1"; then
    printf "\n%s\n" "$(date) $1 : Paquet déjà installé.[ AVERTISSEMENT ]" | tee -a "$_file_logs"
else
    # Si le paquet n'est pas installé, on l'installe
    if test "$?" -eq 1; then
      _cmd="apt-get install -y $1 >/dev/null 2>&1"
      _cmd_text="Installation de $1..."
      f_cmd "$_cmd" "$_cmd_text"
    else
      # Le paquet n'est pas installé et n'est pas disponible dans les dépôts
      printf "%s\n" "$(date) $1 : Paquet non installé et non disponible dans les dépôts. [ AVERTISSEMENT ]" | tee -a "$_file_logs"
    fi
fi
}

#-----------------------------------------------------------------------
# Mise en place de logs pour un programme
#-----------------------------------------------------------------------
f_log_setup() {
printf "\n%s\n" "MISE EN PLACE DE LOGS POUR $1"

# Création du fichier de logs
_cmd="touch /var/log/$1"
_cmd_text="Création du fichier de logs pour $1..."
f_cmd "$_cmd" "$_cmd_text"

# Mise en place de la rotation du fichier de logs pour $1
# Une tabulation devant EOF permet de respecter l'indentation.
_cmd="cat >/etc/logrotate.d/$1 <<	EOF
/var/log/$1 {
	monthly
	size 100M
	rotate 12
	compress
	delaycompress
	missingok
	notifempty
	create 644 root root
}
EOF"
_cmd_text="Mise en place de la rotation du fichier de logs pour $1..."
f_cmd "$_cmd" "$_cmd_text"

}

#-----------------------------------------------------------------------
# Soumission de mot de passe "fort"
# 12 à 25 caractères
# avec obligatoirement 1 chiffre, 1 majuscule, 1 minuscule, 1 caractère spécial
#-----------------------------------------------------------------------
f_submit_secure_password() {
	# [[:digit:]].*[[:digit:]] is a regular expression. =~ is an operand for comparing strings with regular expressions. And || processes the next statement if the previous statement returns a nonzero (most cases means failed operation or not true / false) exit code.
	
	begin=true
	again=false
	
	digits='[[:digit:]].*[[:digit:]]'
	upper='[[:upper:]].*[[:upper:]]'
	lower='[[:lower:]].*[[:lower:]]'
	punct='[[:punct:]].*[[:punct:]]'
	
	while $begin || (( len_pass < 12 && len_pass > 25 )) ||
	    [[ ! ( $test_pass =~ $digits && $test_pass =~ $upper && $test_pass =~ $lower && $test_pass =~ $punct ) ]]
	do
		# Basically, if $again evaluates to true then the echo is executed, if not it will set the again variable to true
	    $again && echo "Les mots de passe ne sont pas identiques. Veuillez réessayer." || again=true
	    begin=false
		
		printf "%s\n" "Entrez le mot de passe (12 à 25 caractères avec obligatoirement 1 chiffre, 1 majuscule, 1 minuscule, 1 caractère spécial)"
	    read -s -p "Mot de passe : " _password
	    echo
	    read -s -p "Confirmation du mot de passe : " _password_confirm
	    echo
		
	    if [[ $_password = $_password_confirm ]]
	    then
	        len_pass=${#_password}
	        test_pass=${_password#?}
	        test_pass=${test_pass%?}
	    else
	        begin=true
	    fi
	done
}

#-----------------------------------------------------------------------
# Soumission de mot de passe
#-----------------------------------------------------------------------
f_submit_password() {
	
	begin=true
	again=false
	
	while $begin
	do
	    $again && echo "Les mots de passe ne sont pas identiques. Veuillez réessayer." || again=true
	    begin=false
		
	    read -s -p "Mot de passe : " _password
	    echo
	    read -s -p "Confirmation du mot de passe : " _password_confirm
	    echo
		
	    if [[ $_password != $_password_confirm ]]
	    then
	        begin=true
	    fi
	done
}
